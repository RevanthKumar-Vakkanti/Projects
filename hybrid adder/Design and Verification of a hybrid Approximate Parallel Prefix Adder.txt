//------------------------------8 Bit-------------
module hybrid_adder_8bit (
    input [7:0] A, B,
    output [7:0] S,
    output Cout
);
    wire [7:0] G, P;
    wire [7:0] C;

    assign G = A & B;
    assign P = A ^ B;

    wire G1_1, G1_2, G1_3, G1_4;
    wire G2_1, G2_2, G3_1;
    wire P1_1, P1_2, P2_1;

    assign G1_1 = G[1] | (P[1] & G[0]);
    assign P1_1 = P[1] & P[0];

    assign G1_2 = G[3] | (P[3] & G[2]);
    assign P1_2 = P[3] & P[2];

    assign G1_3 = G[5] | (P[5] & G[4]);
    assign G1_4 = G[7] | (P[7] & G[6]);

    assign G2_1 = G1_2 | (P1_2 & G1_1);
    assign P2_1 = P1_2 & P1_1;

    assign G2_2 = G1_4 | (P[7] & G1_3);

    assign G3_1 = G2_2 | (P[7] & G2_1);

    assign C[0] = G[0];
    assign C[1] = G1_1;
    assign C[2] = G2_1;
    assign C[3] = G3_1;
    assign C[4] = G1_3;
    assign C[5] = G2_2;
    assign C[6] = G3_1;
    assign C[7] = G3_1;

    assign S[7:0] = P ^ {C[6:0], 1'b0};
    assign Cout = C[7];

endmodule










//--------------------------------4 Bit---------------------
/*module hybrid_adder_4bit (
    input [3:0] A, B,
    output [3:0] S,
    output Cout
);
    wire [3:0] G, P;
    wire [3:0] C;

    assign G = A & B;
    assign P = A ^ B;

    wire G1_1, G2_1, G2_2, G3_1;
    wire P1_1, P2_1;

    assign G1_1 = G[1] | (P[1] & G[0]);
    assign P1_1 = P[1] & P[0];

    assign G2_1 = G[3] | (P[3] & G[2]);
    assign P2_1 = P[3] & P[2];

    assign G2_2 = G2_1 | (P2_1 & G1_1);
    assign G3_1 = G2_2 | (P[3] & G1_1);

    assign C[0] = G[0];
    assign C[1] = G1_1;
    assign C[2] = G2_2;
    assign C[3] = G3_1;

    assign S[3:0] = P ^ {C[2:0], 1'b0};
    assign Cout = C[3];

endmodule*/


//----------------------N Bit-------------------------------

/*module hybrid_adder_Nbit #(parameter N = 16) (
    input [N-1:0] A, B,
    output [N-1:0] S,
    output Cout
);
    wire [N-1:0] G, P;
    wire [N-1:0] C;

    assign G = A & B;
    assign P = A ^ B;

    genvar i, j;
    generate
        wire [N-1:0] G_stage [$clog2(N):0];
        wire [N-1:0] P_stage [$clog2(N):0];

        assign G_stage[0] = G;
        assign P_stage[0] = P;

        for (i = 1; i <= $clog2(N); i = i + 1) begin : gen_prefix_tree
            for (j = 0; j < N; j = j + 1) begin : gen_stage_logic
                if (j < (1 << (i - 1))) begin
                    assign G_stage[i][j] = G_stage[i-1][j];
                    assign P_stage[i][j] = P_stage[i-1][j];
                end else begin
                    assign G_stage[i][j] = G_stage[i-1][j] | (P_stage[i-1][j] & G_stage[i-1][j - (1 << (i - 1))]);
                    assign P_stage[i][j] = P_stage[i-1][j] & P_stage[i-1][j - (1 << (i - 1))];
                end
            end
        end
    endgenerate

    assign C = G_stage[$clog2(N)];
    assign S[N-1:0] = P ^ {C[N-2:0], 1'b0};
    assign Cout = C[N-1];

endmodule */







//---------------------- Transaction -----------------------------
class transaction; 
  rand bit [7:0] A;
  rand bit [7:0] B;
  bit [7:0] S;
  bit       Cout;

  function void display(string name);
    $display(" name =  %s", name);
    $display(" A = %0b, B = %0b", A, B);
    $display(" Sum = %0b, Cout = %0b", S, Cout);
    $display("______________________________________");
  endfunction
endclass

//---------------------- Generator -------------------------------
class generator;
  rand transaction trans;
  mailbox gen2driv;
  event ended;
  int repeat_count;

  function new(mailbox gen2driv);
    this.gen2driv = gen2driv;
  endfunction

task main();
    repeat(repeat_count) begin
        trans = new();
        if (!trans.randomize())
            $fatal(0, "Gen:: trans randomization failed");
        else
            $display("Generated A=%b, B=%b", trans.A, trans.B);
        gen2driv.put(trans);
    end
    -> ended;
endtask

endclass

//---------------------- Interface -------------------------------
interface intf;
  logic [7:0] A;
  logic [7:0] B;
  logic [7:0] S;
  logic Cout;
endinterface

//---------------------- Driver ----------------------------------
class driver;
  virtual intf vif;
  mailbox gen2driv;
  int no_of_transactions;

  function new(virtual intf vif, mailbox gen2driv);
    this.vif = vif;
    this.gen2driv = gen2driv;
  endfunction

task main();
    forever begin
        transaction trans;
        gen2driv.get(trans);
        $display("Driver: Received transaction A=%b, B=%b", trans.A, trans.B);
        vif.A = trans.A;
        vif.B = trans.B;
        #5;
        trans.S = vif.S;
        trans.Cout = vif.Cout;
        trans.display("[Driver]");
        no_of_transactions++;
    end
endtask

endclass

//---------------------- Monitor ---------------------------------
class monitor;
  virtual intf vif;
  mailbox mon2score;

  function new(virtual intf vif, mailbox mon2score);
    this.vif = vif;
    this.mon2score = mon2score;
  endfunction

  task main();
    forever begin
      transaction trans;
      trans = new();
      #5
      trans.A = vif.A;
      trans.B = vif.B;
      #5
      trans.S = vif.S;
      trans.Cout = vif.Cout;
      #2
      mon2score.put(trans);
      trans.display("[Monitor]");
    end
  endtask
endclass

//---------------------- Scoreboard ------------------------------
class scoreboard;
  mailbox mon2score;
  int no_transactions;
  bit [8:0] expected_sum;

  function new(mailbox mon2score);
    this.mon2score = mon2score;
  endfunction

  task main();
    transaction trans;
    forever begin
      #5
      mon2score.get(trans);
      expected_sum = trans.A + trans.B;
      if (trans.S !== expected_sum[7:0] || trans.Cout !== expected_sum[8]) begin
        $error("Scoreboard: Mismatch! A=%b, B=%b, Expected S=%b, Cout=%b, Got S=%b, Cout=%b",
               trans.A, trans.B, expected_sum[7:0], expected_sum[8], trans.S, trans.Cout);
      end else begin
        $display("Scoreboard: Match! A=%b, B=%b, S=%b, Cout=%b", trans.A, trans.B, trans.S, trans.Cout);
      end
      no_transactions++;
      trans.display("[ Scoreboard ]");
    end
  endtask
endclass


//---------------------- Environment -----------------------------
class environment;
  generator gen;
  driver driv;
  monitor mon;
  scoreboard score;
  mailbox gen2driv;
  mailbox mon2score;
  virtual intf vif;

  function new(virtual intf vif);
    this.vif = vif;
    gen2driv = new();
    mon2score = new();
    gen = new(gen2driv);
    driv = new(vif, gen2driv);
    mon = new(vif, mon2score);
    score = new(mon2score);
  endfunction

  task pre_test();
    $display("Environment: Pre-test setup");
  endtask

  task test();
    fork
      gen.main();
      driv.main();
      mon.main();
      score.main();
    join_any
  endtask

  task post_test();
    wait(gen.ended.triggered);
    wait(gen.repeat_count == driv.no_of_transactions);
    wait(gen.repeat_count == score.no_transactions); 
  endtask

  task run();
    pre_test();
    test();
    post_test();
    $finish;
  endtask
endclass

//---------------------- Test ----------------------------------
program test(intf intf);
    environment env;
    initial begin
        env = new(intf);
        env.gen.repeat_count = 1;
        env.run();
    end
endprogram

//---------------------- Top Test Bench --------------------------
module top_tb();
    intf i_intf();

    hybrid_adder_8bit dut (
        .A(i_intf.A),
        .B(i_intf.B),
        .S(i_intf.S),
        .Cout(i_intf.Cout)
    );

    test t1(i_intf);

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars;
    end
endmodule



















/*
//---------------------- Transaction ----------------------------
class transaction #(parameter N = 16);
  rand bit [N-1:0] A;
  rand bit [N-1:0] B;
  bit [N-1:0] S;
  bit       Cout;

  function void display(string name);
    $display(" name =  %s", name);
    $display(" A = %0b, B = %0b", A, B);
    $display(" Sum = %0b, Cout = %0b", S, Cout);
    $display("______________________________________");
  endfunction
endclass

//---------------------- Generator ------------------------------
class generator;
  rand transaction trans;
  mailbox gen2driv;
  event ended;
  int repeat_count;

  function new(mailbox gen2driv);
    this.gen2driv = gen2driv;
  endfunction

task main();
    repeat(repeat_count) begin
        trans = new();
        if (!trans.randomize())
            $fatal(0, "Gen:: trans randomization failed");
        else
            $display("Generated A=%b, B=%b", trans.A, trans.B);
        gen2driv.put(trans);
    end
    -> ended;
endtask

endclass

//---------------------- Interface ----------------------------------
interface intf #(parameter N = 16);
  logic [N-1:0] A;
  logic [N-1:0] B;
  logic [N-1:0] S;
  logic Cout;
endinterface

//---------------------- Driver ----------------------------------
class driver;
  virtual intf vif;
  mailbox gen2driv;
  int no_of_transactions;

  function new(virtual intf vif, mailbox gen2driv);
    this.vif = vif;
    this.gen2driv = gen2driv;
  endfunction

task main();
    forever begin
        transaction trans;
        gen2driv.get(trans);
        $display("Driver: Received transaction A=%b, B=%b", trans.A, trans.B);
        vif.A = trans.A;
        vif.B = trans.B;
        #5;
        trans.S = vif.S;
        trans.Cout = vif.Cout;
        trans.display("[Driver]");
        no_of_transactions++;
    end
endtask

endclass

//---------------------- Monitor ----------------------------------
class monitor;
  virtual intf vif;
  mailbox mon2score;

  function new(virtual intf vif, mailbox mon2score);
    this.vif = vif;
    this.mon2score = mon2score;
  endfunction

  task main();
    forever begin
      transaction trans;
      trans = new();
      #5
      trans.A = vif.A;
      trans.B = vif.B;
      #5
      trans.S = vif.S;
      trans.Cout = vif.Cout;
      #2
      mon2score.put(trans);
      trans.display("[Monitor]");
    end
  endtask
endclass

//---------------------- Scoreboard ----------------------------------
class scoreboard #(parameter N = 16);
  mailbox mon2score;
  int no_transactions;
  bit [N:0] expected_sum; 

  function new(mailbox mon2score);
    this.mon2score = mon2score;
  endfunction

  task main();
    transaction trans;
    forever begin
      #5
      mon2score.get(trans);
      expected_sum = trans.A + trans.B; 
      if (trans.S !== expected_sum[N-1:0] || trans.Cout !== expected_sum[N]) begin
        $error("Scoreboard: Mismatch! A=%b, B=%b, Expected S=%b, Cout=%b, Got S=%b, Cout=%b",
               trans.A, trans.B, expected_sum[N-1:0], expected_sum[N], trans.S, trans.Cout);
      end else begin
        $display("Scoreboard: Match! A=%b, B=%b, S=%b, Cout=%b", trans.A, trans.B, trans.S, trans.Cout);
      end
      no_transactions++;
      trans.display("[ Scoreboard ]");
    end
  endtask
endclass


//---------------------- Environment ----------------------------------
class environment;
  generator gen;
  driver driv;
  monitor mon;
  scoreboard score;
  mailbox gen2driv;
  mailbox mon2score;
  virtual intf vif;

  function new(virtual intf vif);
    this.vif = vif;
    gen2driv = new();
    mon2score = new();
    gen = new(gen2driv);
    driv = new(vif, gen2driv);
    mon = new(vif, mon2score);
    score = new(mon2score);
  endfunction

  task pre_test();
    $display("Environment: Pre-test setup");
  endtask

  task test();
    fork
      gen.main();
      driv.main();
      mon.main();
      score.main();
    join_any
  endtask

  task post_test();
    wait(gen.ended.triggered);
    wait(gen.repeat_count == driv.no_of_transactions);
    wait(gen.repeat_count == score.no_transactions); 
  endtask

  task run();
    pre_test();
    test();
    post_test();
    $finish;
  endtask
endclass

//---------------------- Test ----------------------------------
program test(intf intf);
    environment env;
    initial begin
        env = new(intf);
        env.gen.repeat_count = 1;
        env.run();
    end
endprogram

//---------------------- Top Test Bench ----------------------------------
module top_tb();
  parameter N = 16;
    intf i_intf();

  hybrid_adder_Nbit #(N)dut (
        .A(i_intf.A),
        .B(i_intf.B),
        .S(i_intf.S),
        .Cout(i_intf.Cout)
    );

    test t1(i_intf);

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars;
    end
endmodule */